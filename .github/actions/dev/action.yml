name: Dev

description: Run development checks

inputs:
  ELIXIR_VERSION:
    description: Elixir version
    required: true
  GITHUB_TOKEN:
    description: A github token
    required: true
  MIX_ENV:
    default: dev
    description: The current elixir env
    required: false
  OTP_VERSION:
    description: OTP version
    required: true
  POSTGRES_PASSWORD:
    description: Postgres database password
    required: true
  POSTGRES_USER:
    description: Postgres database user
    required: true
  REDIS_HOST:
    description: The Redis host
    required: true
  REDIS_PASS:
    description: The Redis host
    required: true
  STAGE:
    default: local
    description: The production environment
    required: false
  UPLOADS_PATH:
    description: The uploads path
    required: true

runs:
  using: "composite"
  steps:
    # Checkout code ------------------------------------------------------------
    - name: Check out code
      uses: actions/checkout@v2.3.4

    # Setup Elixir/OTP versions ------------------------------------------------
    - name: Set up Elixir
      uses: erlef/setup-elixir@v1
      with:
        elixir-version: ${{ inputs.ELIXIR_VERSION }}
        otp-version: ${{ inputs.OTP_VERSION }}

    # Print version names ------------------------------------------------------
    - name: Output Elixir version
      shell: bash
      run: elixir --version
    - name: Output PostgreSQL version
      shell: bash
      run: psql --version
    - name: Output Node.js version
      shell: bash
      run: node --version

    # Set vars for the cache step ----------------------------------------------
    - name: Set mix file hash
      id: set_vars
      shell: bash
      run: |
        mix_hash="${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}"
        echo "::set-output name=mix_hash::$mix_hash"

    # Restores PLT cache -------------------------------------------------------
    - name: Cache files
      id: dev-cache
      uses: actions/cache@v3
      with:
        path: |
          deps
          _build
        key: ${{ runner.os }}-dev-mix-${{ steps.set_vars.outputs.mix_hash }}
        restore-keys: |
          ${{ runner.os }}-dev-mix-

    # Get and build all the deps -----------------------------------------------
    - name: Install Dependencies
      shell: bash
      run: |
        mix do deps.get, deps.compile, compile
      env:
        MIX_ENV: ${{ inputs.MIX_ENV }}

    # Setup Postgres -----------------------------------------------------------
    - name: Setup Database
      shell: bash
      run: |
        mix ecto.reset
      env:
        STAGE: ${{ inputs.STAGE }}
        MIX_ENV: ${{ inputs.MIX_ENV }}
        # Postgres env
        POSTGRES_USER: ${{ inputs.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ inputs.POSTGRES_PASSWORD }}

    # Setup the Phoenix Client -------------------------------------------------
    - name: Setup web client
      shell: bash
      run: |
        mix assets.install
        mix assets.deploy

    # Run formatter ------------------------------------------------------------
    - name: Run formatter
      shell: bash
      env:
        # General env
        MIX_ENV: ${{ inputs.MIX_ENV }}
      run: |
          mix check.format
    # Run credo ----------------------------------------------------------------
    - name: Run static code analysis
      shell: bash
      env:
        # General env
        MIX_ENV: ${{ inputs.MIX_ENV }}
        # Misc env
        UPLOADS_PATH: ${{ inputs.UPLOADS_PATH }}
      run: |
          mix check.credo
    # Run dialyxir -------------------------------------------------------------
    - name: Run the discrepancy analyzer
      shell: bash
      env:
        # General env
        MIX_ENV: ${{ inputs.MIX_ENV }}
        # Misc env
        UPLOADS_PATH: ${{ inputs.UPLOADS_PATH }}
      run: |
          mix check.dialyzer
